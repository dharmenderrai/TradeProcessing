#!/usr/bin/env python

import sys

# initialize stock hash table for collecting details
stock_table = {}

# hash for storing last timestamp of stock
stock_ts = {}

# hash for storing total volume of stock
stock_qty = {}

# hash for storing array of tuples of price and qty per stock
stock_px = {}

# initialize variables to capture details from each line
ts, sym, qty, px, line_no = 0, "", 0, 0, 0


'''

	validate the input data
	do not abort but ignore the line if data is incorrect 
	and print the message 
	Price and timestamps are covered in assumptions 
	section of the instruction sheet
'''


def validate_input(ts, sym, qty):
    if len(sym) != 3:
        print("Invalid symbol {} at ts {}".format(sym, ts))
    if (int(qty) <= 0):
        print("Invalid quantity {} for symbol {} at ts {}". format(qty, sym, ts))


'''

	Calculate timestamp gap and store the new one. 

'''

def get_max_ts_gap(sym: str, ts: int) -> int:
    prev_ts, prev_gap, ts_gap = 0, 0, 0

    if sym in stock_ts:
        prev_ts, prev_gap = stock_ts[sym]
        ts_gap = int(ts) - int(prev_ts)
        if prev_gap > ts_gap:  # if old gap is bigger, take it as latest
            ts_gap = prev_gap
    else: # first iteration for this stock
        ts_gap = 0
    print("previous ts {}  previous gap {} current TS {} current gap {}".format(prev_ts, prev_gap, ts, ts_gap))
    if prev_gap > ts_gap:
        ts_gap = prev_gap
    else:
        stock_ts[sym] = [ts, ts_gap]
    print("previous ts {}  previous gap {} current TS {} current gap {}".format(prev_ts, prev_gap, ts, ts_gap))
    print ("return gap {} ".format(ts_gap))
    return ts_gap

'''

	In order to calculate weighted average price, 
	prepare data by taking summation of product of quantity 
	and price per trade per stock
	and populate that in the hash table

'''

def prepare_total_cost_per_stock(sym, qty, px):
    if sym in stock_px:
        stock_px[sym] += int(qty) * int(px)
    else:
        stock_px[sym] = int(qty) * int(px)

'''
		Calculate and populate total volume of each traded stock

'''

def populate_total_volume(sym, qty):
    if sym in stock_qty:
        stock_qty[sym] += int(qty)
    else:
        stock_qty[sym] = int(qty)

''' 
	populate stock table	

	max timestamp gap will be calculated in each iteration
	total volume traded will be calculated per iteration
	max trade price will be calculated per iteration
	
'''

def populate_stock_table(sym, qty, px, ts_gap):

    if sym in stock_table:
        stock_table[sym] = [ts_gap, int(
            stock_table[sym][1]) + int(qty), max(int(stock_table[sym][2]), int(px))]
    else:
        stock_table[sym] = [0, qty, px]

'''

	Read standard input data
	and process

'''

def process_stdin():
    try:
       for line in sys.stdin:
          (ts, sym, qty, px) = line.split(',')
          validate_input(ts, sym, qty)
          populate_total_volume(sym, qty)
          prepare_total_cost_per_stock(sym, qty, px)
          populate_stock_table(sym, qty, px, get_max_ts_gap(sym, ts))
    except:
      print("An exception has occured, Give more information in next iteration of coding")
    finally:
      print("Handle something here in future")

if __name__ == "__main__":
    process_stdin()
    for (key, value) in sorted(stock_table.items()):
        stock_table[key].append(stock_px[key]//stock_qty[key])
        print(key, stock_table[key])
